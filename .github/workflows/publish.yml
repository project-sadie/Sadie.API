name: Publish

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get .csproj file
        id: csproj
        run: |
          FILE=$(find . -name "*.csproj" | head -n 1)
          echo "file=$FILE" >> $GITHUB_OUTPUT

      - name: Extract and bump version
        id: version
        run: |
          FILE="${{ steps.csproj.outputs.file }}"
          echo "Using $FILE"
          OLD_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" "$FILE")
          echo "Old version: $OLD_VERSION"

          IFS='.' read -r major minor patch <<< "$OLD_VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))"
          echo "New version: $NEW_VERSION"

          sed -i "s|<Version>$OLD_VERSION</Version>|<Version>$NEW_VERSION</Version>|" "$FILE"

          echo "old=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "branch=version-bump-${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git checkout -b ${{ steps.version.outputs.branch }}
          git add "${{ steps.csproj.outputs.file }}"
          git commit -m "chore: bump version to v${{ steps.version.outputs.new }}"
          git push origin ${{ steps.version.outputs.branch }}

      - name: Create Pull Request
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          PR_BODY=$(cat <<EOF
Automated version bump after merge to main.

**Old version:** v${{ steps.version.outputs.old }}
**New version:** v${{ steps.version.outputs.new }}
EOF
)
          gh pr create \
            --title "chore: bump version to v${{ steps.version.outputs.new }}" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ steps.version.outputs.branch }}"

      - name: Create Git tag
        if: success()
        run: |
          git tag "v${{ steps.version.outputs.new }}"
          git push origin "v${{ steps.version.outputs.new }}"

