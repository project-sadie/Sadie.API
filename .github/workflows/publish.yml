name: publish

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Bump <Version> in .csproj
        id: bump_version
        run: |
          $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          Write-Output "Updating version in: $($csproj.FullName)"

          $lines = Get-Content $csproj.FullName
          $oldVersion = ''
          $newVersion = ''

          for ($i = 0; $i -lt $lines.Length; $i++) {
            if ($lines[$i] -match '<Version>(\d+)\.(\d+)\.(\d+)</Version>') {
              $major = [int]$matches[1]
              $minor = [int]$matches[2]
              $patch = [int]$matches[3]
              $oldVersion = "$major.$minor.$patch"
              $patch++
              $newVersion = "$major.$minor.$patch"
              $lines[$i] = $lines[$i] -replace $matches[0], "<Version>$newVersion</Version>"
              break
            }
          }

          [System.IO.File]::WriteAllLines($csproj.FullName, $lines)
          echo "oldVersion=$oldVersion" >> $env:GITHUB_ENV
          echo "newVersion=$newVersion" >> $env:GITHUB_ENV

      - name: Commit and push version bump
        id: commit_push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          $branchName = "v-bump-$(Get-Date -Format 'yyyyMMddHHmmss')"
          git checkout -b $branchName
          git add *.csproj
          git commit -m "auto: bump Version to v${{ env.newVersion }} [skip ci]"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} $branchName
          echo "branchName=$branchName" >> $env:GITHUB_ENV

      - name: Create Pull Request
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh pr create \
            --title "chore: bump Version to v${{ env.newVersion }}" \
            --body "Automated version bump after merge to main.

**Old version:** v${{ env.oldVersion }}
**New version:** v${{ env.newVersion }}" \
            --base main \
            --head "${branchName}"

  publish:
    needs: deploy
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Publish NuGet package
        run: |
          foreach ($file in Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg) {
            dotnet nuget push $file `
              --api-key "${{ secrets.NUGET_APIKEY }}" `
              --source https://api.nuget.org/v3/index.json `
              --skip-duplicate
          }

